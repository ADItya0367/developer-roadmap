---
import { CertificateView } from '../../../components/Course/CertificateView';
import { CourseLayout } from '../../../components/Course/CourseLayout';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import {
  getAllCourses,
  getChaptersByCourseId,
  type CourseFileType,
  type ChapterFileType,
} from '../../../lib/course';

interface Params extends Record<string, string | undefined> {
  courseId: string;
}

interface Props {
  course: CourseFileType & { chapters: ChapterFileType[] };
}

export async function getStaticPaths() {
  const courses = await getAllCourses();
  const coursesWithChapters = await Promise.all(
    courses.map(async (course) => {
      const chapters = await getChaptersByCourseId(course.id);
      return {
        ...course,
        chapters,
      };
    }),
  );

  const paths: {
    params: Params;
    props: Props;
  }[] = [];

  for (const course of coursesWithChapters) {
    const courseId = course.id;

    paths.push({
      params: {
        courseId,
      },
      props: {
        course,
      },
    });
  }

  return paths;
}

const { courseId } = Astro.params;
const { course } = Astro.props;
---

<BaseLayout title={course.frontmatter.title}>
  <link
    rel='preload'
    href='/fonts/balsamiq.woff2'
    as='font'
    type='font/woff2'
    crossorigin
    slot='after-header'
  />

  <div slot='page-header'></div>
  <CourseLayout
    activeCourseId={courseId}
    title={course.frontmatter.title}
    chapters={course.chapters}
    client:load
  >
    <CertificateView
      courseTitle={course.frontmatter.title}
      chapters={course.chapters}
      currentCourseId={courseId}
      client:load
    />
  </CourseLayout>
  <div slot='page-footer'></div>
</BaseLayout>

<style>
  @font-face {
    font-family: 'balsamiq';
    src: url('/fonts/balsamiq.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
  }
</style>
